// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type swtpmEvent struct{ Cmd uint32 }

// loadSwtpm returns the embedded CollectionSpec for swtpm.
func loadSwtpm() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_SwtpmBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load swtpm: %w", err)
	}

	return spec, err
}

// loadSwtpmObjects loads swtpm and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*swtpmObjects
//	*swtpmPrograms
//	*swtpmMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadSwtpmObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadSwtpm()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// swtpmSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type swtpmSpecs struct {
	swtpmProgramSpecs
	swtpmMapSpecs
	swtpmVariableSpecs
}

// swtpmProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type swtpmProgramSpecs struct {
	KprobeDoSysOpenat2     *ebpf.ProgramSpec `ebpf:"kprobe_do_sys_openat2"`
	KretprobeDoSysOpenat2  *ebpf.ProgramSpec `ebpf:"kretprobe_do_sys_openat2"`
	KsysRead               *ebpf.ProgramSpec `ebpf:"ksys_read"`
	KsysWrite              *ebpf.ProgramSpec `ebpf:"ksys_write"`
	UprobeSWTPM_IO_Read    *ebpf.ProgramSpec `ebpf:"uprobe_SWTPM_IO_Read"`
	UprobeSWTPM_IO_Write   *ebpf.ProgramSpec `ebpf:"uprobe_SWTPM_IO_Write"`
	UretprobeSWTPM_IO_Read *ebpf.ProgramSpec `ebpf:"uretprobe_SWTPM_IO_Read"`
}

// swtpmMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type swtpmMapSpecs struct {
	Events            *ebpf.MapSpec `ebpf:"events"`
	FualtTableMap     *ebpf.MapSpec `ebpf:"fualt_table_map"`
	Openat2Tracker    *ebpf.MapSpec `ebpf:"openat2_tracker"`
	TargetDataMap     *ebpf.MapSpec `ebpf:"target_data_map"`
	TargetFault       *ebpf.MapSpec `ebpf:"target_fault"`
	TargetSwtpmIoRead *ebpf.MapSpec `ebpf:"target_swtpm_io_read"`
	TpmFdMap          *ebpf.MapSpec `ebpf:"tpm_fd_map"`
}

// swtpmVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type swtpmVariableSpecs struct {
}

// swtpmObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadSwtpmObjects or ebpf.CollectionSpec.LoadAndAssign.
type swtpmObjects struct {
	swtpmPrograms
	swtpmMaps
	swtpmVariables
}

func (o *swtpmObjects) Close() error {
	return _SwtpmClose(
		&o.swtpmPrograms,
		&o.swtpmMaps,
	)
}

// swtpmMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadSwtpmObjects or ebpf.CollectionSpec.LoadAndAssign.
type swtpmMaps struct {
	Events            *ebpf.Map `ebpf:"events"`
	FualtTableMap     *ebpf.Map `ebpf:"fualt_table_map"`
	Openat2Tracker    *ebpf.Map `ebpf:"openat2_tracker"`
	TargetDataMap     *ebpf.Map `ebpf:"target_data_map"`
	TargetFault       *ebpf.Map `ebpf:"target_fault"`
	TargetSwtpmIoRead *ebpf.Map `ebpf:"target_swtpm_io_read"`
	TpmFdMap          *ebpf.Map `ebpf:"tpm_fd_map"`
}

func (m *swtpmMaps) Close() error {
	return _SwtpmClose(
		m.Events,
		m.FualtTableMap,
		m.Openat2Tracker,
		m.TargetDataMap,
		m.TargetFault,
		m.TargetSwtpmIoRead,
		m.TpmFdMap,
	)
}

// swtpmVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadSwtpmObjects or ebpf.CollectionSpec.LoadAndAssign.
type swtpmVariables struct {
}

// swtpmPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadSwtpmObjects or ebpf.CollectionSpec.LoadAndAssign.
type swtpmPrograms struct {
	KprobeDoSysOpenat2     *ebpf.Program `ebpf:"kprobe_do_sys_openat2"`
	KretprobeDoSysOpenat2  *ebpf.Program `ebpf:"kretprobe_do_sys_openat2"`
	KsysRead               *ebpf.Program `ebpf:"ksys_read"`
	KsysWrite              *ebpf.Program `ebpf:"ksys_write"`
	UprobeSWTPM_IO_Read    *ebpf.Program `ebpf:"uprobe_SWTPM_IO_Read"`
	UprobeSWTPM_IO_Write   *ebpf.Program `ebpf:"uprobe_SWTPM_IO_Write"`
	UretprobeSWTPM_IO_Read *ebpf.Program `ebpf:"uretprobe_SWTPM_IO_Read"`
}

func (p *swtpmPrograms) Close() error {
	return _SwtpmClose(
		p.KprobeDoSysOpenat2,
		p.KretprobeDoSysOpenat2,
		p.KsysRead,
		p.KsysWrite,
		p.UprobeSWTPM_IO_Read,
		p.UprobeSWTPM_IO_Write,
		p.UretprobeSWTPM_IO_Read,
	)
}

func _SwtpmClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed swtpm_x86_bpfel.o
var _SwtpmBytes []byte
